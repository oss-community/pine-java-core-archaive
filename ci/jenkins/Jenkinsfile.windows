pipeline {
  agent any
  tools {
    maven 'maven3'
    jdk 'jdk17'
    git 'git'
  }
  environment {
    GITHUB_USERNAME=credentials('github-username')
    GITHUB_EMAIL=credentials('github-email')
    GITHUB_JENKINS_TOKEN=credentials('github-jenkins-token')
    GITHUB_PACKAGE_TOKEN=credentials('github-package-token')
    GITHUB_ARTIFACTORY_URL=credentials('github-artifactory-url')
    SONAR_TOKEN=credentials('sonar-token')
    SONAR_URL=credentials('sonar-url')
    JFROG_ARTIFACTORY_USERNAME=credentials('jfrog-artifactory-username')
    JFROG_ARTIFACTORY_ENCRYPTED_PASSWORD=credentials('jfrog-artifactory-encrypted-password')
    JFROG_ARTIFACTORY_SNAPSHOT_URL=credentials('jfrog-artifactory-snapshot-url')
    JFROG_ARTIFACTORY_RELEASE_URL=credentials('jfrog-artifactory-release-url')
    JFROG_ARTIFACTORY_CONTEXT_URL=credentials('jfrog-artifactory-context-url')
    JFROG_ARTIFACTORY_REPOSITORY_PREFIX=credentials('jfrog-artifactory-repository-prefix')
    NEXUS_ARTIFACTORY_USERNAME=credentials('nexus-artifactory-username')
    NEXUS_ARTIFACTORY_PASSWORD=credentials('nexus-artifactory-password')
    NEXUS_ARTIFACTORY_HOST_URL=credentials('nexus-artifactory-host-url')
    NEXUS_ARTIFACTORY_SNAPSHOT_URL=credentials('nexus-artifactory-snapshot-url')
    NEXUS_ARTIFACTORY_RELEASE_URL=credentials('nexus-artifactory-release-url')
  }
  stages {
    stage('Check Verify') {
      parallel {
        stage('Version') {
          steps {
            bat 'java -version'
            bat 'mvn --version'
            bat 'git --version'
          }
        }

        stage('Verifying Maven POM') {
          steps {
            fileExists 'pom.xml'
          }
        }

        stage('Verify Maven Settings') {
          steps {
            fileExists 'settings.xml'
          }
        }

         stage('Maven Validate') {
          steps {
            bat 'mvn validate'
          }
        }

      }
    }

    stage('Build') {
      steps {
        bat 'mvn clean package -DskipTests=true -s settings.xml -P source,javadoc,license'
      }
    }

    stage('Unit Test') {
      steps {
        bat 'mvn test -s settings.xml'
      }
    }

    stage('Clean Code') {
      parallel {
        stage('Check Style') {
          steps {
            bat 'mvn checkstyle:check -s settings.xml -P checkstyle'
          }
        }

        stage('Sonarqube') {
          steps {
            bat 'mvn sonar:sonar -s settings.xml -P sonar'
          }
        }

      }
    }

    stage('Making Site') {
      steps {
        bat 'mvn site:site site:stage -s settings.xml -P site,javadoc,changelog,test-report,github'
      }
    }

    stage('Publish Site') {
      steps {
        bat 'mvn scm-publish:publish-scm -s settings.xml -P site,github'
      }
    }

    stage('Deploy to JFrog') {
      steps {
        bat 'mvn deploy -s settings.xml -P jfrog'
      }
    }

    stage('Deploy to GitHub') {
      steps {
        bat 'mvn deploy -s settings.xml -P github'
      }
    }

    stage('Deploy to Nexus') {
      steps {
        bat 'mvn deploy -s settings.xml -P nexus -DskipTests=true'
      }
    }
  }
}
